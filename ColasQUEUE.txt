
package ejercicioviernes;
public class EjercicioViernes {

    public static void main(String[] args) {
        // TODO code application logic here
        //COLA DE Padres:nomPadre,nomMadre y nroHijos
        //COLA HIJOS: nomHijo, edad, sexo
        CCircularP A= new CCircularP();
        A.adicionar(new Padres("Luis","Ana",1));
        A.adicionar(new Padres("Pedro","Maria",3));
        A.adicionar(new Padres("Javier","Rocio",2));
        A.adicionar(new Padres("Fabio","Sonia",3));
        A.adicionar(new Padres("Juan","Elena",2));
        A.mostrar();
        
        CCircularH B=new CCircularH();
        B.adicionar(new Hijo("Milenka","Femenino",5));
        
        B.adicionar(new Hijo("Robert","Masculino",10));
        B.adicionar(new Hijo("Jaime","Masculino",5));
        B.adicionar(new Hijo("Karen","Femenino",2));
        
        B.adicionar(new Hijo("Rocio","Femenino",15));
        B.adicionar(new Hijo("Fanny","Femenino",11));
        
        B.adicionar(new Hijo("Lola","Femenino",7));
        B.adicionar(new Hijo("Luis","Masculino",5));
        B.adicionar(new Hijo("Diana","Femenino",3));
        
        B.adicionar(new Hijo("Susy","Femenino",20));
        B.adicionar(new Hijo("Carlos","Masculino",15));
        B.mostrar();
        //2.mostrar a padre, madre y sus hijos
        PadresHijos(A,B);
        //3. de cada padre y madre determinar del nro de hijos e hijas que tienen
        ContarH(A,B);
        //4.mostrar a padre y madre que tengan algun hijo con el nombre X
        ContarH(A,B,"Karen");
        //5.IMPLEMENTAR UN QUEUE PARA PADRES O HIJOS CREAR Y MOSTRAR
    }
    public static void PadresHijos(CCircularP a,CCircularH b)
    {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH();
        while(!a.esvacia())
        {
            Padres px=a.eliminar();
            System.out.println(px.getNomPadre()+" "+px.getNomMadre());
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                System.out.println("\t"+h.getNomHijo()+" "+h.getEdad());
                b1.adicionar(h);
            }
            a1.adicionar(px);
        }
        a.vaciar(a1);
        b.vaciar(b1);
    }
     public static void ContarH(CCircularP a,CCircularH b)
     {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH();
        while(!a.esvacia())
        {
            Padres px=a.eliminar();
            System.out.println(px.getNomPadre()+" "+px.getNomMadre());
            int cont=0;
            int c=0;
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                if(h.getSexo()=="Femenino")
                    cont++;
                else
                    c++;
                b1.adicionar(h);
            }
            a1.adicionar(px);
            System.out.println("Nro de hijas: "+cont);
            System.out.println("Nro de hijos: "+c);
        }
        a.vaciar(a1);
        b.vaciar(b1);
        
     }
    public static void ContarH(CCircularP a,CCircularH b,String X) 
    {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH(); 
        while(!b.esvacia())
        {
            Padres px=a.eliminar();
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                if(h.getNomHijo()==X)
                    System.out.println(px.getNomPadre()+" "+px.getNomMadre()); 
                b1.adicionar(h);
            }
            a1.adicionar(px);
    }     
      a.vaciar(a1);
      b.vaciar(b1);
   }
    
}
---------------------------------
public class Padres {
    private String nomPadre,nomMadre;
    private int nroHijos;
    public Padres(String a,String b, int c){
        nomPadre=a;
        nomMadre=b;
        nroHijos=c;
    }

    public String getNomPadre() {
        return nomPadre;
    }

    public void setNomPadre(String nomPadre) {
        this.nomPadre = nomPadre;
    }

    public String getNomMadre() {
        return nomMadre;
    }

    public void setNomMadre(String nomMadre) {
        this.nomMadre = nomMadre;
    }

    public int getNroHijos() {
        return nroHijos;
    }

    public void setNroHijos(int nroHijos) {
        this.nroHijos = nroHijos;
    }
    public void mostrar(){
        System.out.println(nomPadre+" "+nomMadre+" "+nroHijos);
    }
}
-----------------------------------------------------ç
public class CCircularP {
    private int max=50;
    private Padres[]v =new Padres[max+1];
    private int ini, fin;
    
    public CCircularP(){
     ini=fin=0;
}
    int nroelem ()
    {
        return ((max + fin - ini) % max);
    }


    boolean esvacia ()
    {
        if (nroelem () == 0)
            return (true);
        return (false);
    }


    boolean esllena ()
    {
        if (nroelem () == max - 1)
            return (true);
        return (false);
    }


    void adicionar (Padres elem)
    {
        if (!esllena ())
        {

            fin = (fin + 1) % max;
            v [fin] = elem;
        }
        else
            System.out.println ("Cola circular llena");
    }


    Padres eliminar ()
    {
        Padres elem = null;
        if (!esvacia ())
        {
            ini = (ini + 1) % max;
            elem = v [ini];
            if (nroelem () == 0)
                ini = fin = 0;
        }
        else
            System.out.println ("Cola circular vacia");
        return (elem);
    }


    void mostrar ()
    {
        Padres elem;
        if (esvacia ())
            System.out.println ("Cola vacia xxx");
        else
        {
            System.out.println ("\n Padres de la Cola ");
            CCircularP aux = new CCircularP ();
            while (!esvacia ())
            {
                elem = eliminar ();
                aux.adicionar (elem);
                elem.mostrar();
            }
            while (!aux.esvacia ())
            {
                elem = aux.eliminar ();

                adicionar (elem);
            }
        }
    }


   /* void llenar (int n)
    {
        int i;
        for (i = 1 ; i <= n ; i++)
        {
            Fraccion elem = new Fraccion ();
            elem.leer ();
            adicionar (elem);
        }
    }*/



    /*void invertir ()
    {
        CCircularN a = new CCircularN ();
        CCircularN b = new CCircularN ();
        while (!esvacia ())
        {
            while (nroelem () != 1)
                a.adicionar (eliminar ());
            b.adicionar (eliminar ());
            while (!a.esvacia ())
                adicionar (a.eliminar ());
        }
        while (!b.esvacia ())
            adicionar (b.eliminar ());

    }*/


    void vaciar (CCircularP a)
    {
        while (!a.esvacia ())
            adicionar (a.eliminar ());

    }
}
--------------------------------------------
public class Hijo {
    private String nomHijo,sexo;
    private int edad;
    
    public Hijo(String a,String b,int c){
        nomHijo=a;
        sexo=b;
        edad=c;
    }

    public String getNomHijo() {
        return nomHijo;
    }

    public void setNomHijo(String nomHijo) {
        this.nomHijo = nomHijo;
    }

    public String getSexo() {
        return sexo;
    }

    public void setSexo(String sexo) {
        this.sexo = sexo;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }
    public void mostrar(){
        System.out.println(nomHijo+" "+sexo+" "+edad);
    }
}
-------------------------------------------
public class CCircularH {
    private int max=50;
    private Hijo[]v =new Hijo[max+1];
    private int ini, fin;
    
    public CCircularH(){
     ini=fin=0;
}
    int nroelem ()
    {
        return ((max + fin - ini) % max);
    }


    boolean esvacia ()
    {
        if (nroelem () == 0)
            return (true);
        return (false);
    }


    boolean esllena ()
    {
        if (nroelem () == max - 1)
            return (true);
        return (false);
    }


    void adicionar (Hijo elem)
    {
        if (!esllena ())
        {

            fin = (fin + 1) % max;
            v [fin] = elem;
        }
        else
            System.out.println ("Cola circular llena");
    }


    Hijo eliminar ()
    {
       Hijo elem = null;
        if (!esvacia ())
        {
            ini = (ini + 1) % max;
            elem = v [ini];
            if (nroelem () == 0)
                ini = fin = 0;
        }
        else
            System.out.println ("Cola circular vacia");
        return (elem);
    }


    void mostrar ()
    {
        Hijo elem;
        if (esvacia ())
            System.out.println ("Cola vacia xxx");
        else
        {
            System.out.println ("\n Hijos de la Cola ");
            CCircularH aux = new CCircularH ();
            while (!esvacia ())
            {
                elem = eliminar ();
                aux.adicionar (elem);
                elem.mostrar();
            }
            while (!aux.esvacia ())
            {
                elem = aux.eliminar ();

                adicionar (elem);
            }
        }
    }


   /* void llenar (int n)
    {
        int i;
        for (i = 1 ; i <= n ; i++)
        {
            Fraccion elem = new Fraccion ();
            elem.leer ();
            adicionar (elem);
        }
    }*/



    /*void invertir ()
    {
        CCircularN a = new CCircularN ();
        CCircularN b = new CCircularN ();
        while (!esvacia ())
        {
            while (nroelem () != 1)
                a.adicionar (eliminar ());
            b.adicionar (eliminar ());
            while (!a.esvacia ())
                adicionar (a.eliminar ());
        }
        while (!b.esvacia ())
            adicionar (b.eliminar ());

    }*/


    void vaciar (CCircularH a)
    {
        while (!a.esvacia ())
            adicionar (a.eliminar ());

    }
}  

------------------------------------------QUEUE

package ejercicioviernes;
import java.util.*;
import java.util.PriorityQueue;
public class EjercicioViernes {

    public static void main(String[] args) {
        // TODO code application logic here
        //COLA DE Padres:nomPadre,nomMadre y nroHijos
        //COLA HIJOS: nomHijo, edad, sexo
        CCircularP A= new CCircularP();
        A.adicionar(new Padres("Luis","Ana",1));
        A.adicionar(new Padres("Pedro","Maria",3));
        A.adicionar(new Padres("Javier","Rocio",2));
        A.adicionar(new Padres("Fabio","Sonia",3));
        A.adicionar(new Padres("Juan","Elena",2));
        A.mostrar();
        
        CCircularH B=new CCircularH();
        B.adicionar(new Hijo("Milenka","Femenino",5));
        
        B.adicionar(new Hijo("Robert","Masculino",10));
        B.adicionar(new Hijo("Jaime","Masculino",5));
        B.adicionar(new Hijo("Karen","Femenino",2));
        
        B.adicionar(new Hijo("Rocio","Femenino",15));
        B.adicionar(new Hijo("Fanny","Femenino",11));
        
        B.adicionar(new Hijo("Lola","Femenino",7));
        B.adicionar(new Hijo("Luis","Masculino",5));
        B.adicionar(new Hijo("Diana","Femenino",3));
        
        B.adicionar(new Hijo("Susy","Femenino",20));
        B.adicionar(new Hijo("Carlos","Masculino",15));
        B.mostrar();
        //2.mostrar a padre, madre y sus hijos
        PadresHijos(A,B);
        //3. de cada padre y madre determinar del nro de hijos e hijas que tienen
        ContarH(A,B);
        //4.mostrar a padre y madre que tengan algun hijo con el nombre X
        ContarH(A,B,"Karen");
        //5.IMPLEMENTAR UN QUEUE PARA PADRES O HIJOS CREAR Y MOSTRAR
        Queue Q=new LinkedList();
        Q.add(1);
        Q.add(2);
        Q.add(3);
        while(!Q.isEmpty())
        System.out.println(Q.remove());  
        Queue <String> Q2=new LinkedList<String>();
        Q.add("Hola");
        Q.add("como");
        Q.add("estas");
        while(!Q2.isEmpty())
            System.out.println(Q2.remove()); 
        Queue <Padres> Q3=new LinkedList<Padres>();
        
        Padres p1=new Padres("Luis","Ana",1);
        Padres p2=new Padres("Luis","Jenny",1);
        Padres p3=new Padres("Luis","Rocio",1);
        Q3.add(p1);
        Q3.add(p2);
        Q3.add(p3);
        System.out.println(Q3.size());
        
    }
    public static void PadresHijos(CCircularP a,CCircularH b)
    {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH();
        while(!a.esvacia())
        {
            Padres px=a.eliminar();
            System.out.println(px.getNomPadre()+" "+px.getNomMadre());
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                System.out.println("\t"+h.getNomHijo()+" "+h.getEdad());
                b1.adicionar(h);
            }
            a1.adicionar(px);
        }
        a.vaciar(a1);
        b.vaciar(b1);
    }
     public static void ContarH(CCircularP a,CCircularH b)
     {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH();
        while(!a.esvacia())
        {
            Padres px=a.eliminar();
            System.out.println(px.getNomPadre()+" "+px.getNomMadre());
            int cont=0;
            int c=0;
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                if(h.getSexo()=="Femenino")
                    cont++;
                else
                    c++;
                b1.adicionar(h);
            }
            a1.adicionar(px);
            System.out.println("Nro de hijas: "+cont);
            System.out.println("Nro de hijos: "+c);
        }
        a.vaciar(a1);
        b.vaciar(b1);
        
     }
    public static void ContarH(CCircularP a,CCircularH b,String X) 
    {
        CCircularP a1=new CCircularP();
        CCircularH b1=new CCircularH(); 
        while(!b.esvacia())
        {
            Padres px=a.eliminar();
            for(int i=1;i<=px.getNroHijos();i++)
            {
                Hijo h=b.eliminar();
                if(h.getNomHijo()==X)
                    System.out.println("Padres: "+px.getNomPadre()+" "+px.getNomMadre()); 
                b1.adicionar(h);
            }
            a1.adicionar(px);
    }     
      a.vaciar(a1);
      b.vaciar(b1);
   }
    
}
